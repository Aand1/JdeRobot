// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `quadrotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __quadrotor_h__
#define __quadrotor_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace jderobot
{

class Quadrotor;

}

}

namespace jderobot
{

class Quadrotor;
bool operator==(const Quadrotor&, const Quadrotor&);
bool operator<(const Quadrotor&, const Quadrotor&);

}

namespace IceInternal
{

::Ice::Object* upCast(::jderobot::Quadrotor*);
::IceProxy::Ice::Object* upCast(::IceProxy::jderobot::Quadrotor*);

}

namespace jderobot
{

typedef ::IceInternal::Handle< ::jderobot::Quadrotor> QuadrotorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::jderobot::Quadrotor> QuadrotorPrx;

void __read(::IceInternal::BasicStream*, QuadrotorPrx&);
void __patch__QuadrotorPtr(void*, ::Ice::ObjectPtr&);

}

namespace jderobot
{

enum State
{
    Unknown,
    Initialize,
    Landed,
    Flying,
    Hovering,
    Testing,
    TakingOff,
    ToFixPoint,
    Landing,
    Looping
};

void __write(::IceInternal::BasicStream*, State);
void __read(::IceInternal::BasicStream*, State&);

struct Velocity
{
    ::Ice::Double x;
    ::Ice::Double y;
    ::Ice::Double z;

    bool operator==(const Velocity& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Velocity& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Velocity& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Velocity& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Velocity& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Velocity& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Velocities
{
    ::jderobot::Velocity linear;
    ::jderobot::Velocity angular;

    bool operator==(const Velocities& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(linear != __rhs.linear)
        {
            return false;
        }
        if(angular != __rhs.angular)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Velocities& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(linear < __rhs.linear)
        {
            return true;
        }
        else if(__rhs.linear < linear)
        {
            return false;
        }
        if(angular < __rhs.angular)
        {
            return true;
        }
        else if(__rhs.angular < angular)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Velocities& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Velocities& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Velocities& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Velocities& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace jderobot
{

class Callback_Quadrotor_land_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Quadrotor_land_Base> Callback_Quadrotor_landPtr;

class Callback_Quadrotor_takeoff_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Quadrotor_takeoff_Base> Callback_Quadrotor_takeoffPtr;

class Callback_Quadrotor_cmdVel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Quadrotor_cmdVel_Base> Callback_Quadrotor_cmdVelPtr;

class Callback_Quadrotor_toggleCam_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Quadrotor_toggleCam_Base> Callback_Quadrotor_toggleCamPtr;

class Callback_Quadrotor_reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Quadrotor_reset_Base> Callback_Quadrotor_resetPtr;

}

namespace IceProxy
{

namespace jderobot
{

class Quadrotor : virtual public ::IceProxy::Ice::Object
{
public:

    void land()
    {
        land(0);
    }
    void land(const ::Ice::Context& __ctx)
    {
        land(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_land()
    {
        return begin_land(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx)
    {
        return begin_land(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::jderobot::Callback_Quadrotor_landPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context& __ctx, const ::jderobot::Callback_Quadrotor_landPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_land(&__ctx, __del, __cookie);
    }

    void end_land(const ::Ice::AsyncResultPtr&);
    
private:

    void land(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_land(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void takeoff()
    {
        takeoff(0);
    }
    void takeoff(const ::Ice::Context& __ctx)
    {
        takeoff(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_takeoff()
    {
        return begin_takeoff(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx)
    {
        return begin_takeoff(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::jderobot::Callback_Quadrotor_takeoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context& __ctx, const ::jderobot::Callback_Quadrotor_takeoffPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_takeoff(&__ctx, __del, __cookie);
    }

    void end_takeoff(const ::Ice::AsyncResultPtr&);
    
private:

    void takeoff(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_takeoff(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cmdVel(const ::jderobot::Velocities& v)
    {
        cmdVel(v, 0);
    }
    void cmdVel(const ::jderobot::Velocities& v, const ::Ice::Context& __ctx)
    {
        cmdVel(v, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v)
    {
        return begin_cmdVel(v, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v, const ::Ice::Context& __ctx)
    {
        return begin_cmdVel(v, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cmdVel(v, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cmdVel(v, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v, const ::jderobot::Callback_Quadrotor_cmdVelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cmdVel(v, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities& v, const ::Ice::Context& __ctx, const ::jderobot::Callback_Quadrotor_cmdVelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cmdVel(v, &__ctx, __del, __cookie);
    }

    void end_cmdVel(const ::Ice::AsyncResultPtr&);
    
private:

    void cmdVel(const ::jderobot::Velocities&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cmdVel(const ::jderobot::Velocities&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void toggleCam()
    {
        toggleCam(0);
    }
    void toggleCam(const ::Ice::Context& __ctx)
    {
        toggleCam(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_toggleCam()
    {
        return begin_toggleCam(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx)
    {
        return begin_toggleCam(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::jderobot::Callback_Quadrotor_toggleCamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context& __ctx, const ::jderobot::Callback_Quadrotor_toggleCamPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_toggleCam(&__ctx, __del, __cookie);
    }

    void end_toggleCam(const ::Ice::AsyncResultPtr&);
    
private:

    void toggleCam(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_toggleCam(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reset()
    {
        reset(0);
    }
    void reset(const ::Ice::Context& __ctx)
    {
        reset(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_reset()
    {
        return begin_reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx)
    {
        return begin_reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::jderobot::Callback_Quadrotor_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context& __ctx, const ::jderobot::Callback_Quadrotor_resetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reset(&__ctx, __del, __cookie);
    }

    void end_reset(const ::Ice::AsyncResultPtr&);
    
private:

    void reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Quadrotor> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Quadrotor*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Quadrotor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace jderobot
{

class Quadrotor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void land(const ::Ice::Context*) = 0;

    virtual void takeoff(const ::Ice::Context*) = 0;

    virtual void cmdVel(const ::jderobot::Velocities&, const ::Ice::Context*) = 0;

    virtual void toggleCam(const ::Ice::Context*) = 0;

    virtual void reset(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace jderobot
{

class Quadrotor : virtual public ::IceDelegate::jderobot::Quadrotor,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void land(const ::Ice::Context*);

    virtual void takeoff(const ::Ice::Context*);

    virtual void cmdVel(const ::jderobot::Velocities&, const ::Ice::Context*);

    virtual void toggleCam(const ::Ice::Context*);

    virtual void reset(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace jderobot
{

class Quadrotor : virtual public ::IceDelegate::jderobot::Quadrotor,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void land(const ::Ice::Context*);

    virtual void takeoff(const ::Ice::Context*);

    virtual void cmdVel(const ::jderobot::Velocities&, const ::Ice::Context*);

    virtual void toggleCam(const ::Ice::Context*);

    virtual void reset(const ::Ice::Context*);
};

}

}

namespace jderobot
{

class Quadrotor : virtual public ::Ice::Object
{
public:

    typedef QuadrotorPrx ProxyType;
    typedef QuadrotorPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void land(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___land(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void takeoff(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___takeoff(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cmdVel(const ::jderobot::Velocities&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cmdVel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void toggleCam(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___toggleCam(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Quadrotor& l, const Quadrotor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Quadrotor& l, const Quadrotor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace jderobot
{

template<class T>
class CallbackNC_Quadrotor_land : public Callback_Quadrotor_land_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Quadrotor_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_land<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_land<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_land<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_land<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Quadrotor_land : public Callback_Quadrotor_land_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Quadrotor_land(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_land<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_land<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_land<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_landPtr
newCallback_Quadrotor_land(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_land<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Quadrotor_takeoff : public Callback_Quadrotor_takeoff_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Quadrotor_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_takeoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_takeoff<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_takeoff<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_takeoff<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Quadrotor_takeoff : public Callback_Quadrotor_takeoff_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Quadrotor_takeoff(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_takeoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_takeoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_takeoff<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_takeoffPtr
newCallback_Quadrotor_takeoff(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_takeoff<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Quadrotor_cmdVel : public Callback_Quadrotor_cmdVel_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Quadrotor_cmdVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_cmdVel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_cmdVel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_cmdVel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_cmdVel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Quadrotor_cmdVel : public Callback_Quadrotor_cmdVel_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Quadrotor_cmdVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_cmdVel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_cmdVel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_cmdVel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_cmdVelPtr
newCallback_Quadrotor_cmdVel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_cmdVel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Quadrotor_toggleCam : public Callback_Quadrotor_toggleCam_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Quadrotor_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_toggleCam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_toggleCam<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_toggleCam<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_toggleCam<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Quadrotor_toggleCam : public Callback_Quadrotor_toggleCam_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Quadrotor_toggleCam(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_toggleCam<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_toggleCamPtr
newCallback_Quadrotor_toggleCam(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_toggleCam<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Quadrotor_reset : public Callback_Quadrotor_reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Quadrotor_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Quadrotor_reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Quadrotor_reset : public Callback_Quadrotor_reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Quadrotor_reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Quadrotor_resetPtr
newCallback_Quadrotor_reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Quadrotor_reset<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
