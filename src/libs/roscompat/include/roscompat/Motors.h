// Generated by gencpp from file roscompat/Motors.msg
// DO NOT EDIT!


#ifndef ROSCOMPAT_MESSAGE_MOTORS_H
#define ROSCOMPAT_MESSAGE_MOTORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscompat
{
template <class ContainerAllocator>
struct Motors_
{
  typedef Motors_<ContainerAllocator> Type;

  Motors_()
    : w(0.0)
    , v(0.0)
    , l(0.0)  {
    }
  Motors_(const ContainerAllocator& _alloc)
    : w(0.0)
    , v(0.0)
    , l(0.0)  {
  (void)_alloc;
    }



   typedef double _w_type;
  _w_type w;

   typedef double _v_type;
  _v_type v;

   typedef double _l_type;
  _l_type l;




  typedef boost::shared_ptr< ::roscompat::Motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscompat::Motors_<ContainerAllocator> const> ConstPtr;

}; // struct Motors_

typedef ::roscompat::Motors_<std::allocator<void> > Motors;

typedef boost::shared_ptr< ::roscompat::Motors > MotorsPtr;
typedef boost::shared_ptr< ::roscompat::Motors const> MotorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscompat::Motors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscompat::Motors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscompat

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'HasHeader': False, 'IsFixedSize': True, 'IsMessage': True}
// {'roscompat': ['/home/fqez/github/testing/5.4.2/src/libs/roscompat/msg'], 'std_msgs': ['/home/fqez/ROS_cv/install_isolated/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct HasHeader< ::roscompat::Motors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscompat::Motors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscompat::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscompat::Motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscompat::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscompat::Motors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscompat::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe4f47449dd66cb0d979009113216f9f";
  }

  static const char* value(const ::roscompat::Motors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe4f47449dd66cb0ULL;
  static const uint64_t static_value2 = 0xd979009113216f9fULL;
};

template<class ContainerAllocator>
struct DataType< ::roscompat::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscompat/Motors";
  }

  static const char* value(const ::roscompat::Motors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscompat::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 w\n\
float64 v\n\
float64 l\n\
";
  }

  static const char* value(const ::roscompat::Motors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscompat::Motors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w);
      stream.next(m.v);
      stream.next(m.l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Motors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscompat::Motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscompat::Motors_<ContainerAllocator>& v)
  {
    s << indent << "w: ";
    Printer<double>::stream(s, indent + "  ", v.w);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "l: ";
    Printer<double>::stream(s, indent + "  ", v.l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCOMPAT_MESSAGE_MOTORS_H
